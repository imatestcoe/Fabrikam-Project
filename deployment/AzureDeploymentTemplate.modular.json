{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "description": "Master template for Fabrikam AI Demo platform - orchestrates modular deployment",
    "author": "Fabrikam Team"
  },
  "parameters": {
    "baseName": {
      "type": "string",
      "defaultValue": "fabrikam",
      "minLength": 3,
      "maxLength": 15,
      "metadata": {
        "description": "Base name for all resources. Will be combined with a unique suffix."
      }
    },
    "environment": {
      "type": "string",
      "defaultValue": "development",
      "allowedValues": [
        "development",
        "production"
      ],
      "metadata": {
        "description": "Environment for the deployment. development: For testing and demo preparation. production: For live business demos."
      }
    },
    "githubRepository": {
      "type": "string",
      "defaultValue": "https://github.com/davebirr/Fabrikam-Project",
      "metadata": {
        "description": "URL to your GitHub repository fork"
      }
    },
    "githubToken": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "GitHub Personal Access Token for deployment automation (optional - can be configured later)"
      }
    },
    "customDomain": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Custom domain name (e.g., levelupcsp.com). Leave empty to use Azure default domains (.azurewebsites.net)"
      }
    },
    "enableCustomDomains": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable custom domain configuration. Requires DNS records to be created manually."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Azure region for all resources"
      }
    },
    "skuName": {
      "type": "string",
      "defaultValue": "B1",
      "allowedValues": [
        "F1",
        "B1",
        "B2",
        "S1",
        "S2",
        "P1v2",
        "P2v2"
      ],
      "metadata": {
        "description": "App Service Plan pricing tier"
      }
    },
    "databaseProvider": {
      "type": "string",
      "defaultValue": "InMemory",
      "allowedValues": [
        "InMemory",
        "SqlServer"
      ],
      "metadata": {
        "description": "Database provider choice: InMemory (quick demos, no persistence) or SqlServer (production-like, persistent data)"
      }
    },
    "authenticationMode": {
      "type": "string",
      "defaultValue": "BearerToken",
      "allowedValues": [
        "Disabled",
        "BearerToken", 
        "EntraExternalId"
      ],
      "metadata": {
        "description": "Authentication mode for the Fabrikam demo platform. Disabled: GUID tracking only, no authentication barriers. BearerToken: Each demo user registers and receives a secure JWT token for their AI agent/MCP client - tokens expire and need periodic refresh for security. EntraExternalId: Full OAuth 2.0 with Microsoft Entra External ID integration for enterprise identity."
      }
    },
    "enableUserTracking": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Enable user session tracking across requests using GUID-based tracking"
      }
    },
    "entraExternalIdTenant": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Entra External ID tenant domain (e.g., contoso.onmicrosoft.com). Required when using EntraExternalId authentication mode."
      }
    },
    "entraExternalIdClientId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Entra External ID application client ID. Required when using EntraExternalId authentication mode."
      }
    },
    "sqlAdminUsername": {
      "type": "string",
      "defaultValue": "fabrikamadmin",
      "metadata": {
        "description": "SQL Server administrator username (only used when databaseProvider is SqlServer)"
      }
    },
    "sqlAdminPassword": {
      "type": "securestring",
      "defaultValue": "[concat('Fabr1kam!', substring(uniqueString(resourceGroup().id), 0, 8))]",
      "metadata": {
        "description": "SQL Server administrator password (only used when databaseProvider is SqlServer). Auto-generated if not provided."
      }
    },
    "userObjectId": {
      "type": "string",
      "metadata": {
        "description": "Your User Object ID - this grants you Key Vault access to manage secrets. Get this with: az ad signed-in-user show --query id -o tsv"
      }
    },
    "_artifactsLocation": {
      "type": "string",
      "defaultValue": "[deployment().properties.templateLink.uri]",
      "metadata": {
        "description": "Base URI for linked templates and artifacts"
      }
    }
  },
  "variables": {
    "suffix": "[substring(toLower(uniqueString(resourceGroup().id, resourceGroup().location)), 0, 6)]",
    "resourceGroupNameParts": "[split(resourceGroup().name, '-')]",
    "hasResourceGroupSuffix": "[and(greater(length(variables('resourceGroupNameParts')), 2), equals(length(last(variables('resourceGroupNameParts'))), 6))]",
    "extractedSuffix": "[if(variables('hasResourceGroupSuffix'), toLower(last(variables('resourceGroupNameParts'))), '')]",
    "generatedSuffix": "[substring(toLower(uniqueString(resourceGroup().id)), 0, 6)]",
    "finalSuffix": "[if(variables('hasResourceGroupSuffix'), variables('extractedSuffix'), variables('generatedSuffix'))]",
    "resourceBaseName": "[concat(parameters('baseName'), '-', parameters('environment'), '-', variables('finalSuffix'))]",
    "apiAppName": "[toLower(concat('fabrikam-api-', parameters('environment'), '-', variables('finalSuffix')))]",
    "mcpAppName": "[toLower(concat('fabrikam-mcp-', parameters('environment'), '-', variables('finalSuffix')))]",
    "apiPlanName": "[toLower(concat('plan-api-', parameters('environment'), '-', variables('finalSuffix')))]",
    "mcpPlanName": "[toLower(concat('plan-mcp-', parameters('environment'), '-', variables('finalSuffix')))]",
    "logWorkspaceName": "[toLower(concat('log-', parameters('environment'), '-', variables('finalSuffix')))]",
    "apiInsightsName": "[toLower(concat('appi-api-', parameters('environment'), '-', variables('finalSuffix')))]",
    "mcpInsightsName": "[toLower(concat('appi-mcp-', parameters('environment'), '-', variables('finalSuffix')))]",
    "apiUrl": "[if(parameters('enableCustomDomains'), concat('https://fabrikam-api-', toLower(parameters('environment')), '-', variables('finalSuffix'), '.', parameters('customDomain')), concat('https://', variables('apiAppName'), '.azurewebsites.net'))]",
    "mcpUrl": "[if(parameters('enableCustomDomains'), concat('https://fabrikam-mcp-', toLower(parameters('environment')), '-', variables('finalSuffix'), '.', parameters('customDomain')), concat('https://', variables('mcpAppName'), '.azurewebsites.net'))]",
    "apiCustomDomain": "[concat('fabrikam-api-', toLower(parameters('environment')), '-', variables('finalSuffix'), '.', parameters('customDomain'))]",
    "mcpCustomDomain": "[concat('fabrikam-mcp-', toLower(parameters('environment')), '-', variables('finalSuffix'), '.', parameters('customDomain'))]",
    "sqlServerName": "[toLower(concat('sql-', parameters('environment'), '-', variables('finalSuffix')))]",
    "sqlDatabaseName": "[toLower(concat('sqldb-', parameters('environment'), '-', variables('finalSuffix')))]",
    "keyVaultName": "[toLower(concat('kv-', parameters('environment'), '-', variables('finalSuffix')))]",
    "jwtSecretName": "FabrikamJwtSecret",
    "sqlConnectionSecretName": "DefaultConnection",
    "isAuthenticationEnabled": "[not(equals(parameters('authenticationMode'), 'Disabled'))]",
    "isJwtMode": "[equals(parameters('authenticationMode'), 'BearerToken')]",
    "isEntraMode": "[equals(parameters('authenticationMode'), 'EntraExternalId')]",
    "moduleBaseUri": "[uri(parameters('_artifactsLocation'), 'modules/')]"
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2021-04-01",
      "name": "shared-infrastructure",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[uri(variables('moduleBaseUri'), 'shared-infrastructure.json')]"
        },
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "logWorkspaceName": {
            "value": "[variables('logWorkspaceName')]"
          },
          "apiInsightsName": {
            "value": "[variables('apiInsightsName')]"
          },
          "mcpInsightsName": {
            "value": "[variables('mcpInsightsName')]"
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2021-04-01",
      "name": "database",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[uri(variables('moduleBaseUri'), 'database.json')]"
        },
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "databaseProvider": {
            "value": "[parameters('databaseProvider')]"
          },
          "sqlServerName": {
            "value": "[variables('sqlServerName')]"
          },
          "sqlDatabaseName": {
            "value": "[variables('sqlDatabaseName')]"
          },
          "sqlAdminUsername": {
            "value": "[parameters('sqlAdminUsername')]"
          },
          "sqlAdminPassword": {
            "value": "[parameters('sqlAdminPassword')]"
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2021-04-01",
      "name": "app-services",
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'shared-infrastructure')]"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[uri(variables('moduleBaseUri'), 'app-services.json')]"
        },
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "environment": {
            "value": "[parameters('environment')]"
          },
          "skuName": {
            "value": "[parameters('skuName')]"
          },
          "databaseProvider": {
            "value": "[parameters('databaseProvider')]"
          },
          "authenticationMode": {
            "value": "[parameters('authenticationMode')]"
          },
          "apiPlanName": {
            "value": "[variables('apiPlanName')]"
          },
          "mcpPlanName": {
            "value": "[variables('mcpPlanName')]"
          },
          "apiAppName": {
            "value": "[variables('apiAppName')]"
          },
          "mcpAppName": {
            "value": "[variables('mcpAppName')]"
          },
          "apiInsightsConnectionString": {
            "value": "[reference('shared-infrastructure').outputs.apiInsightsConnectionString.value]"
          },
          "mcpInsightsConnectionString": {
            "value": "[reference('shared-infrastructure').outputs.mcpInsightsConnectionString.value]"
          },
          "keyVaultName": {
            "value": "[variables('keyVaultName')]"
          },
          "jwtSecretName": {
            "value": "[variables('jwtSecretName')]"
          },
          "sqlConnectionSecretName": {
            "value": "[variables('sqlConnectionSecretName')]"
          },
          "apiUrl": {
            "value": "[variables('apiUrl')]"
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2021-04-01",
      "name": "security",
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'app-services')]",
        "[resourceId('Microsoft.Resources/deployments', 'database')]"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[uri(variables('moduleBaseUri'), 'security.json')]"
        },
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "keyVaultName": {
            "value": "[variables('keyVaultName')]"
          },
          "authenticationMode": {
            "value": "[parameters('authenticationMode')]"
          },
          "databaseProvider": {
            "value": "[parameters('databaseProvider')]"
          },
          "jwtSecretName": {
            "value": "[variables('jwtSecretName')]"
          },
          "sqlConnectionSecretName": {
            "value": "[variables('sqlConnectionSecretName')]"
          },
          "sqlServerFqdn": {
            "value": "[reference('database').outputs.sqlServerFqdn.value]"
          },
          "sqlDatabaseName": {
            "value": "[variables('sqlDatabaseName')]"
          },
          "sqlAdminUsername": {
            "value": "[parameters('sqlAdminUsername')]"
          },
          "sqlAdminPassword": {
            "value": "[parameters('sqlAdminPassword')]"
          },
          "entraExternalIdClientId": {
            "value": "[parameters('entraExternalIdClientId')]"
          },
          "userObjectId": {
            "value": "[parameters('userObjectId')]"
          },
          "apiAppPrincipalId": {
            "value": "[reference('app-services').outputs.apiAppPrincipalId.value]"
          },
          "mcpAppPrincipalId": {
            "value": "[reference('app-services').outputs.mcpAppPrincipalId.value]"
          },
          "resourceGroupId": {
            "value": "[resourceGroup().id]"
          },
          "subscriptionId": {
            "value": "[subscription().subscriptionId]"
          },
          "suffix": {
            "value": "[variables('finalSuffix')]"
          }
        }
      }
    }
  ],
  "outputs": {
    "resourceGroupName": {
      "type": "string",
      "value": "[resourceGroup().name]"
    },
    "instanceSuffix": {
      "type": "string",
      "value": "[variables('finalSuffix')]"
    },
    "apiAppName": {
      "type": "string",
      "value": "[variables('apiAppName')]"
    },
    "mcpAppName": {
      "type": "string",
      "value": "[variables('mcpAppName')]"
    },
    "apiUrl": {
      "type": "string",
      "value": "[variables('apiUrl')]"
    },
    "mcpUrl": {
      "type": "string",
      "value": "[variables('mcpUrl')]"
    },
    "apiHealthCheck": {
      "type": "string",
      "value": "[concat(variables('apiUrl'), '/health')]"
    },
    "mcpHealthCheck": {
      "type": "string",
      "value": "[concat(variables('mcpUrl'), '/status')]"
    },
    "customDomainsEnabled": {
      "type": "bool",
      "value": "[parameters('enableCustomDomains')]"
    },
    "apiCustomDomain": {
      "type": "string",
      "value": "[if(parameters('enableCustomDomains'), variables('apiCustomDomain'), 'Not configured')]"
    },
    "mcpCustomDomain": {
      "type": "string",
      "value": "[if(parameters('enableCustomDomains'), variables('mcpCustomDomain'), 'Not configured')]"
    },
    "dnsRecordsNeeded": {
      "type": "string",
      "value": "[if(parameters('enableCustomDomains'), concat('Create CNAME records: ', variables('apiCustomDomain'), ' -> ', variables('apiAppName'), '.azurewebsites.net and ', variables('mcpCustomDomain'), ' -> ', variables('mcpAppName'), '.azurewebsites.net'), 'No custom domains configured')]"
    },
    "databaseProvider": {
      "type": "string",
      "value": "[parameters('databaseProvider')]"
    },
    "sqlServerName": {
      "type": "string",
      "value": "[if(equals(parameters('databaseProvider'), 'SqlServer'), variables('sqlServerName'), 'Not configured - using InMemory')]"
    },
    "sqlDatabaseName": {
      "type": "string",
      "value": "[if(equals(parameters('databaseProvider'), 'SqlServer'), variables('sqlDatabaseName'), 'Not configured - using InMemory')]"
    },
    "keyVaultName": {
      "type": "string", 
      "value": "[variables('keyVaultName')]"
    },
    "authenticationMode": {
      "type": "string",
      "value": "[parameters('authenticationMode')]"
    },
    "authenticationEnabled": {
      "type": "bool",
      "value": "[variables('isAuthenticationEnabled')]"
    },
    "demoCredentials": {
      "type": "string",
      "value": "[reference('security').outputs.demoCredentials.value]"
    },
    "deploymentInstructions": {
      "type": "string",
      "value": "[concat('Resources created successfully! Database: ', parameters('databaseProvider'), ', Authentication: ', parameters('authenticationMode'), '. Key Vault: ', variables('keyVaultName'), '. Next: Set up GitHub Actions CI/CD for automated deployments.')]"
    }
  }
}
