# Fix User Access Administrator Permissions for COE Users
# This script adds the missing User Access Administrator role to existing COE users
# so they can deploy ARM templates that create role assignments

param(
    [string]$ConfigFile = "coe-config.json",
    [switch]$WhatIf
)

Write-Host "üîß Fix User Access Administrator Permissions for COE Users" -ForegroundColor Cyan
Write-Host "=" * 60 -ForegroundColor Gray

# Load configuration
try {
    $config = Get-Content $ConfigFile | ConvertFrom-Json
    Write-Host "‚úÖ Configuration loaded from: $ConfigFile" -ForegroundColor Green
}
catch {
    Write-Host "‚ùå Failed to load configuration from $ConfigFile" -ForegroundColor Red
    exit 1
}

# Connect to Azure (with session reuse)
try {
    $context = Get-AzContext
    if (-not $context -or $context.Subscription.Id -ne $config.azureSubscriptionId) {
        Write-Host "üîê Connecting to Azure..." -ForegroundColor Yellow
        Connect-AzAccount -TenantId $config.tenantId -SubscriptionId $config.azureSubscriptionId | Out-Null
    }
    else {
        Write-Host "‚úÖ Using existing Azure session" -ForegroundColor Green
    }
    
    Set-AzContext -SubscriptionId $config.azureSubscriptionId | Out-Null
    Write-Host "‚úÖ Azure context set to subscription: $($config.azureSubscriptionId)" -ForegroundColor Green
}
catch {
    Write-Host "‚ùå Failed to connect to Azure: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}

# Process each user
foreach ($user in $config.users) {
    $username = $user.username
    $userPrincipalName = "$username@$($config.tenantDomain)"
    $resourceGroupName = "rg-fabrikam-coe-$username"
    
    Write-Host ""
    Write-Host "üë§ Processing user: $username" -ForegroundColor White
    Write-Host "üìß UPN: $userPrincipalName" -ForegroundColor Gray
    Write-Host "üìÅ Resource Group: $resourceGroupName" -ForegroundColor Gray
    
    if (-not $WhatIf) {
        try {
            # Check if resource group exists
            $rg = Get-AzResourceGroup -Name $resourceGroupName -ErrorAction SilentlyContinue
            if (-not $rg) {
                Write-Host "  ‚ö†Ô∏è  Resource group $resourceGroupName does not exist - skipping" -ForegroundColor Yellow
                continue
            }
            
            # Check current User Access Administrator role
            $existingUserAccess = Get-AzRoleAssignment -SignInName $userPrincipalName -RoleDefinitionName "User Access Administrator" -ResourceGroupName $resourceGroupName -ErrorAction SilentlyContinue
            
            if ($existingUserAccess) {
                Write-Host "  ‚úÖ User already has User Access Administrator role" -ForegroundColor Green
            }
            else {
                Write-Host "  üîë Adding User Access Administrator role..." -ForegroundColor Yellow
                New-AzRoleAssignment -SignInName $userPrincipalName -RoleDefinitionName "User Access Administrator" -ResourceGroupName $resourceGroupName -ErrorAction Stop | Out-Null
                Write-Host "  ‚úÖ User Access Administrator role assigned successfully" -ForegroundColor Green
            }
            
            # Verify all required roles
            Write-Host "  üìã Current role assignments:" -ForegroundColor Cyan
            
            $readerRole = Get-AzRoleAssignment -SignInName $userPrincipalName -RoleDefinitionName "Reader" -Scope "/subscriptions/$($config.azureSubscriptionId)" -ErrorAction SilentlyContinue
            $contributorRole = Get-AzRoleAssignment -SignInName $userPrincipalName -RoleDefinitionName "Contributor" -ResourceGroupName $resourceGroupName -ErrorAction SilentlyContinue
            $userAccessRole = Get-AzRoleAssignment -SignInName $userPrincipalName -RoleDefinitionName "User Access Administrator" -ResourceGroupName $resourceGroupName -ErrorAction SilentlyContinue
            
            Write-Host "    üìñ Reader (Subscription): $(if ($readerRole) { '‚úÖ Yes' } else { '‚ùå No' })" -ForegroundColor $(if ($readerRole) { 'Green' } else { 'Red' })
            Write-Host "    üîê Contributor (RG): $(if ($contributorRole) { '‚úÖ Yes' } else { '‚ùå No' })" -ForegroundColor $(if ($contributorRole) { 'Green' } else { 'Red' })
            Write-Host "    üîë User Access Admin (RG): $(if ($userAccessRole) { '‚úÖ Yes' } else { '‚ùå No' })" -ForegroundColor $(if ($userAccessRole) { 'Green' } else { 'Red' })
        }
        catch {
            Write-Host "  ‚ùå Failed to update user permissions: $($_.Exception.Message)" -ForegroundColor Red
        }
    }
    else {
        Write-Host "  [WHAT-IF] Would check and assign User Access Administrator role to RG: $resourceGroupName" -ForegroundColor Magenta
    }
}

Write-Host ""
Write-Host "üéØ Summary" -ForegroundColor Cyan
Write-Host "=" * 30 -ForegroundColor Gray
if (-not $WhatIf) {
    Write-Host "‚úÖ Permission fix complete!" -ForegroundColor Green
    Write-Host "üí° Users can now deploy ARM templates that create role assignments" -ForegroundColor White
}
else {
    Write-Host "üîç What-If mode completed - no changes made" -ForegroundColor Magenta
    Write-Host "üí° Run without -WhatIf to apply changes" -ForegroundColor White
}

Write-Host ""
Write-Host "üìã Required Permissions for ARM Template Deployment:" -ForegroundColor Cyan
Write-Host "  üìñ Reader - Subscription level (view all resources)" -ForegroundColor White
Write-Host "  üîê Contributor - Resource Group level (create/modify resources)" -ForegroundColor White  
Write-Host "  üîë User Access Administrator - Resource Group level (assign roles to Key Vault)" -ForegroundColor White
